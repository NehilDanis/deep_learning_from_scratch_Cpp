//
// Created by nehil on 06.06.2019.
//

#ifndef DLFSC_DOTPRODUCT_H
#define DLFSC_DOTPRODUCT_H

#include "../headers/ComputationalNode.h"



/*! \brief A class which implements the dot product operation in the network.
 */
class DotProduct : public ComputationalNode{
public:
    std::vector<Eigen::MatrixXd> input; //!< the input value of the dot product operation.

    Eigen::MatrixXd weights; //!< weights of this layer.

    std::vector<Eigen::MatrixXd> output; //!< the output value of the dot product operation will be stored here after the calculation.

    std::vector<Eigen::MatrixXd> derivative_x; //!< the derivative of the dot product operation with respect to the input value will be kept here.

    Eigen::MatrixXd derivative_w; //!< the derivative of the dot product operation with respect to weights.

    Eigen::MatrixXd velocity_w; //!< the velocity for the momentum gradient descent.

    int output_size; //!< the height of the output layer

public:

    /**
     *The constructor of the dot product computation node.
     * @param row the number of neurons in the next layer.
     * @param column the number of neurons in the previous layer.
     * @param tmp_layer_num the layer id of the dot product layer.
     */
    DotProduct(int row, int column);

    /**
     * The forward pass of the dot product will be calculated here.
     * @param tmp_input the input value passing through the previous nodes.
     * @return the result of the dot product operation.
     */
    std::vector<Eigen::MatrixXd> compute_currect_operation(std::vector<Eigen::MatrixXd> tmp_input) override ;

    /**
     * A function to calculate the backpropagation of the dot product operation.
     * @param prev_derivative the down flowing derivative.
     * @return the multiplication of the current derivative and the down flowing derivative.
     */
    std::vector<Eigen::MatrixXd> set_derivative(std::vector<Eigen::MatrixXd> prev_derivative) override;

    /**
     * A function to update the weights after the backpropagation operation.
     * @param learning_rate
     * @param batch_size
     */
    void set_parameter_values(double learning_rate, int batch_size) override;

    /**
     * A function to generate random numbers for the initialization of weights.
     * Random numbers are generated by using Xavier initialization.
     * @param tmp_weights an Eigen matrix, weight value in this computational node.
     * @param input_nodes_layer1 an integer argument, number of rows of the weight matrix.
     * @param input_nodes_layer2 an integer argument, number of columns of the weight matrix.
     */
    static void random_number_generator(Eigen::MatrixXd &tmp_weights, int input_nodes_layer1, int input_nodes_layer2);


    /**
     * A function to run the forward pass of the dot product operation during the testing phase.
     * @param tmp_input a vector of Eigen matrices, an input coming from the previous computational node.
     * @return a vector of Eigen matrices, returns the values of the input after the dot product operation.
     */
    std::vector<Eigen::MatrixXd> testing_compute_currect_operation(std::vector<Eigen::MatrixXd> tmp_input) override;


    /**
     * A function to save the weights after the training is done.
     * @param out an ofstream object that is from the file opened to save the weights.
     */
    void write_binary(std::ofstream& out) override;

    /**
     * A function to load the weights before the training is started.
     * @param in an ifstream object that is from the file opened to load the weights.
     */
    void read_binary(std::ifstream& in) override;

    /**
     * A function to return the output size of this computational node.
     * @return  respectively, number of outputs, height of the output, and the width of the output.
     */
    std::array<int, 3> get_output_size() override { return std::array<int, 3> { 1, this->output_size,
                                                                                1};}
};

#endif //DLFSC_DOTPRODUCT_H
