//
// Created by nehil on 06.06.2019.
//

#ifndef DLFSC_ADDNODE_H
#define DLFSC_ADDNODE_H

#include "../headers/ComputationalNode.h"


/*! \brief A class which implements the add bias operation in the network. This only called in the fully connected layers.
 *
 *
 */
class AddNode : public ComputationalNode{
public:
    std::vector<Eigen::MatrixXd> input; //!< the input of the bias addition operation.

    Eigen::MatrixXd bias; //!< the value for the bias to be added onto the given input.

    std::vector<Eigen::MatrixXd> output; //!< the output value of the bias addition operation.
    std::vector<Eigen::MatrixXd> derivative_x; //!< derivative of the bias addition operation wrt. the input value.

    Eigen::MatrixXd  derivative_b; //!< derivative of the bias addition operation wrt. the bias value.
    Eigen::VectorXd velocity; //!< velocity value to use in the momentum optimization fuhnction.
    int num_nodes;


public:

    /**
     * A constructor for adding bias operation.
     * @param num_nodes an integer argument, represents the number of input neurons in the layer.
     */
    explicit AddNode(int num_nodes);

    /**
     * A function to calculate the bias addition on the coming input value.
     * @param tmp_input a vector of Eigen matrices, an input coming from the previous computational node.
     * @return a vector of Eigen matrices, returns the values of the input after adding the bias.
     */
    std::vector<Eigen::MatrixXd> compute_currect_operation(std::vector<Eigen::MatrixXd> tmp_input) override ;

    /**
     * A function to set the new bias value after the backward pass, after that this will set all the variables in this
     * computational node to zero.
     * @param learning_rate a double argument, learning rate.
     * @param batch_size an integer argument, the number of samples in one batch.
     */
    void set_parameter_values(double learning_rate, int batch_size) override;

    /**
     * A function to find the derivative of add bias operation.
     * The derivative is calculated with respect to both input and the bias.
     * @param prev_derivative a vector of Eigen matrices, down flow derivative through this add bias operation.
     * @return a vector of Eigen matrices, the multiplication of the current derivative of the operation and the input down flow derivative.
     */
    std::vector<Eigen::MatrixXd> set_derivative(std::vector<Eigen::MatrixXd> prev_derivative) override;

    /**
     * A function to run the forward pass of the add node operation during the testing phase.
     * @param tmp_input a vector of Eigen matrices, an input coming from the previous computational node.
     * @return a vector of Eigen matrices, returns the values of the input after adding the bias.
     */
    std::vector<Eigen::MatrixXd> testing_compute_currect_operation(std::vector<Eigen::MatrixXd> tmp_input) override;

    /**
     * A function to save the biases to a file.
     * @param out an ofstream object which is from the file opened to save the biases.
     */
    void write_binary(std::ofstream& out) override ;

    /**
     * A function to load the biases back into the network.
     * @param in an ifstream object which is from the file opened to load the biases.
     */
    void read_binary(std::ifstream& in) override;


    /**
     * A function to return the output size of this computational node.
     * @return  respectively, number of outputs, height of the output, and the width of the output.
     */
    std::array<int, 3> get_output_size() override { return std::array<int, 3> { 1, this->num_nodes,
                                                                                1};}

private:
    /**
     * A function to generate random numbers for the initialization of bias.
     * Random numbers are generated by using Xavier initialization.
     * @param tmp_bias an Eigen matrix, bias value in this computational node.
     * @param num_of_input_nodes an integer argument, refers to the number of neurons in the add bias layer, necessary to implement the Xavier initialization.
     */
    void random_number_generator(Eigen::MatrixXd &tmp_bias, int num_of_input_nodes);

};

#endif //DLFSC_ADDNODE_H
